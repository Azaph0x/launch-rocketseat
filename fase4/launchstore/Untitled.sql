CREATE TABLE "products" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "category_id" int NOT NULL,
  "user_id" int,
  "name" text NOT NULL,
  "description" text NOT NULL,
  "price" int NOT NULL,
  "old_price" int,
  "quantity" int DEFAULT 0,
  "status" int DEFAULT 1,
  "created_at" timestamp DEFAULT 'now()',
  "updated_at" timestamp DEFAULT 'now()'
);

CREATE TABLE "categories" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" text NOT NULL
);

CREATE TABLE "files" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" text,
  "path" text NOT NULL,
  "product_id" int
);

ALTER TABLE "products" ADD FOREIGN KEY ("category_id") REFERENCES "categories" ("id");
ALTER TABLE "files" ADD FOREIGN KEY ("product_id") REFERENCES "products" ("id");

CREATE TABLE "users" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" text NOT NULL,
  "email" text UNIQUE NOT NULL,
  "password" text NOT NULL,
  "cpf_cnpj" text UNIQUE NOT NULL,
  "cep" text,
  "address" text,
  "created_at" timestamp DEFAULT 'now()',
  "updated_at" timestamp DEFAULT 'now()'
);

-- foreign key
ALTER TABLE "products" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id")

-- create procedure
CREATE FUNCTION trigger_Set_timestamp() RETURNS TRIGGER AS $$
BEGIN
	NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- auto update_at products
CREATE TRIGGER set_timestamp BEFORE UPDATE ON users FOR EACH ROW EXECUTE PROCEDURE trigger_set_timestamp();

-- auto update_at user
CREATE TRIGGER set_timestamp BEFORE UPDATE ON products FOR EACH ROW EXECUTE PROCEDURE trigger_set_timestamp();



CREATE TABLE "session" (
  "sid" varchar NOT NULL COLLATE "default",
  "sess" json NOT NULL,
  "expire" timestamp(6) NOT NULL
)
WITH (OIDS=FALSE);

ALTER TABLE "session" ADD CONSTRAINT "session_pkey" PRIMARY KEY ("sid") NOT DEFERRABLE INITIALLY IMMEDIATE;

CREATE INDEX "IDX_session_expire" ON "session" ("expire");

-- cascade effect when delete user and products
ALTER TABLE "products" 
DROP CONSTRAINT products_user_id_fkey,
ADD CONSTRAINT products_user_id_fkey
FOREIGN KEY ("user_id")
REFERENCES "users" ("id")
ON DELETE CASCADE;

ALTER TABLE "files" DROP CONSTRAINT files_product_id_fkey,
ADD CONSTRAINT files_product_id_fkey FOREIGN KEY ("product_id")
REFERENCES "products" ("id")
ON DELETE CASCADE;


-- TO RUN SEED
DELETE FROM products;
DELETE FROM users;
DELETE FROM files;

-- RESTART SEQUENCE AUTO_INCREMENT FROM TABLES IDS
ALTER SEQUENCE products_id_seq RESTART WITH 1;
ALTER SEQUENCE users_id_seq RESTART WITH 1;
ALTER SEQUENCE files_id_seq RESTART WITH 1;



-- ORDERS
CREATE TABLE "orders" ("id" SERIAL PRIMARY KEY,
                      "seller_id" int NOT NULL,
                      "buyer_id" int NOT NULL,
                      "product_id" int NOT NULL,
                      "price" int NOT NULL,
                       "quantity" int DEFAULT 0,
                       "total" int NOT NULL,
                       "status" text NOT NULL,
                       "created_at" TIMESTAMP DEFAULT (now()),
                       "updated_at" TIMESTAMP DEFAULT (now())
);
-- RESTRICOES  
ALTER TABLE "orders" ADD FOREIGN KEY ("seller_id") REFERENCES "users" ("id");
ALTER TABLE "orders" ADD FOREIGN KEY ("buyer_id") REFERENCES "users" ("id");
ALTER TABLE "orders" ADD FOREIGN KEY ("product_id") REFERENCES "products" ("id");

-- TRIGGER
CREATE TRIGGER set_timestamp BEFORE UPDATE on orders FOR EACH ROW EXECUTE PROCEDURE trigger_set_timestamp();


-- SOFT DELETE
-- 1.Criar uma columns na table products chamada deleted_at
ALTER TABLE products ADD COLUMN "deleted_at" timestamp;
-- 2. Criar uma regra que vai rodar todas as vezes que solicitarmos o DELTE
CREATE OR REPLACE RULE delete_product AS ON DELETE TO products
DO INSTEAD
UPDATE products
SET deleted_at = now()
WHERE products.id = old.id;
-- 3. Criar uma VIEW onde vamos puixar somente os dados que estao ativos
CREATE VIEW products_without_deleted AS SELECT * FROM products WHERE deleted_At IS NULL